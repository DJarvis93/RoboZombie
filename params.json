{"name":"RoboZombie","tagline":"/rō-bō'zŏm'bē/ noun. 1. Makes Android networking a breeze. 2. Accepts an interface which describes the remote service and gives you an implementation of it.","body":"##\"Effortless networking for your Android application\"   \r\nMirror an endpoint API by annotating an interface and inject the generated proxy.\r\n\r\n<br>\r\n##Overview\r\n\r\nHere's your model.   \r\n\r\n```java\r\npublic class Repo {\r\n\r\n    private String id;\r\n    private String name;\r\n    private boolean fork;\r\n    private int stargazers_count;\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n<br>\r\nDefine the endpoint.   \r\n\r\n```java\r\n@Deserialize(JSON)\r\n@Endpoint(\"https://api.github.com\")\r\npublic interface GitHubEndpoint {\r\n\r\n    @GET(\"/users/{user}/repos\")\r\n    List<Repo> getRepos(@PathParam(\"user\") String user);\r\n}\r\n```\r\n> Looks for [Gson](http://code.google.com/p/google-gson) on your build path.   \r\n\r\n<br>\r\nInject and invoke.   \r\n\r\n```java\r\n@Bite\r\nprivate GitHubEndpoint endpoint;   \r\n\r\n{\r\n    Zombie.infect(this);\r\n}\r\n\r\n...\r\n\r\nList<Repo> repos = endpoint.getRepos(\"sahan\");\r\n```\r\n<br>\r\nCreate as many endpoints as you want...   \r\n\r\n```java\r\n@Endpoint(\"http://example.com\")\r\npublic interface ExampleEndpoint {\r\n\r\n    @Serialize(XML)\t\r\n    @PUT(\"/content\")\r\n    void putContent(@Entity Content content);\r\n}\r\n```\r\n> Looks for [Simple-XML](http://simple.sourceforge.net) on your build path.\r\n\r\n<br>\r\n...and inject 'em all.   \r\n\r\n```java\r\n@Bite\r\nprivate GitHubEndpoint gitHubEndpoint;\r\n\r\n@Bite\r\nprivate ExampleEndpoint exampleEndpoint;\r\n\r\n{\r\n    Zombie.infect(this);\r\n}\r\n```\r\n<br>\r\nRoboZombie requires the **INTERNET** manifest permission for network communication.   \r\n \r\n```xml\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n```\r\n> ...and be sure to invoke all synchronous requests from a worker thread.\r\n\r\n<br>\r\n##Setup\r\n> If you opt to use the out-of-the-box JSON (de)serializer add the [Gson](http://code.google.com/p/google-gson) dependency; like wise add the [Simple-XML](http://simple.sourceforge.net) dependency for the XML (de)serializer.    \r\n\r\n<br>\r\n### 1. For Maven based projects.   \r\n\r\nAdd the following dependency to project's pom.xml file.\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>com.lonepulse</groupId>\r\n   <artifactId>robozombie</artifactId>\r\n   <version>1.3.1</version>\r\n</dependency>\r\n```\r\n\r\n<br>   \r\n### 2. For Gradle based projects.   \r\n\r\nAdd the following repository and dependency to your project's build.gradle file.\r\n\r\n```groovy\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    compile 'com.lonepulse:robozombie:1.3.1'\r\n}\r\n```\r\n\r\n<br>   \r\n### 3. Add the JAR to your build path manually.   \r\n\r\nDownload the [RoboZombie-1.3.1.jar](http://repo1.maven.org/maven2/com/lonepulse/robozombie/1.3.1/robozombie-1.3.1.jar) \r\nand add it to your **libs** folder.   \r\n> Note that [Gson](http://search.maven.org/remotecontent?filepath=com/google/code/gson/gson/2.2.4/gson-2.2.4.jar) \r\nis required for JSON (de)serialization and [Simple-XML](http://search.maven.org/remotecontent?filepath=org/simpleframework/simple-xml/2.7.1/simple-xml-2.7.1.jar) \r\nis required for XML (de)serialization.   \r\n\r\n<br>\r\n##Wiki\r\n\r\nCoding with RoboZombie is a breeze. It follows a simple annotation based coding style and adheres to a *minimal intrusion* policy. \r\nKickoff with the [quickstart](https://github.com/sahan/RoboZombie/wiki/Quickstart) and follow the rest of the wiki pages. \r\n\r\n1. [Quickstart](https://github.com/sahan/RoboZombie/wiki/Quickstart)\r\n\r\n2. [Defining, Injecting and Invoking](https://github.com/sahan/RoboZombie/wiki/Defining,-Injecting-and-Invoking)\r\n\r\n3. [Identifying HTTP Methods](https://github.com/sahan/RoboZombie/wiki/Identifying-HTTP-Methods)\r\n\r\n4. [Sending Query and Form Parameters](https://github.com/sahan/RoboZombie/wiki/Sending-Query-and-Form-Parameters)\r\n\r\n5. [Sending a Request Body](https://github.com/sahan/RoboZombie/wiki/Sending-a-Request-Body)\r\n\r\n6. [Serializing Request Content](https://github.com/sahan/RoboZombie/wiki/Serializing-Request-Content)\r\n\r\n7. [Receiving a Response Body](https://github.com/sahan/RoboZombie/wiki/Receiving-a-Response-Body)\r\n\r\n8. [Deserializing Response Content](https://github.com/sahan/RoboZombie/wiki/Deserializing-Response-Content)\r\n\r\n7. [Sending and Receiving Headers](https://github.com/sahan/RoboZombie/wiki/Sending-and-Receiving-Headers)\r\n\r\n8. [Executing Requests Asynchronously](https://github.com/sahan/RoboZombie/wiki/Executing-Requests-Asynchronously)\r\n\r\n9. [Creating Stateful Endpoints](https://github.com/sahan/RoboZombie/wiki/Creating-Stateful-Endpoints)\r\n\r\n10. [Intercepting Requests](https://github.com/sahan/RoboZombie/wiki/Intercepting-Requests)\r\n\r\n11. [Overriding, Detaching and Skipping Components](https://github.com/sahan/RoboZombie/wiki/Overriding,-Detaching-and-Skipping-Components)\r\n\r\n12. [Wiring and Injecting Endpoints](https://github.com/sahan/RoboZombie/wiki/Wiring-and-Injecting-Endpoints)\r\n\r\n13. [Configuring RoboZombie](https://github.com/sahan/RoboZombie/wiki/Configuring-RoboZombie)\r\n<br><br>   \r\n\r\n##License\r\nThis library is licensed under [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html).\r\n","google":"UA-40937518-1","note":"Don't delete this file! It's used internally to help with page regeneration."}